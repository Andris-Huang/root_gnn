#!/usr/bin/env python
"""
Training GNN
"""

import tensorflow as tf

import os
import sys
import argparse

import re
import time
import random
import functools

import numpy as np
import sklearn.metrics


from graph_nets import utils_tf
from graph_nets import utils_np
import sonnet as snt

from root_gnn import model
from heptrkx.dataset import graph
from heptrkx.utils import load_yaml

ckpt_name = 'checkpoint'

prog_name = os.path.basename(sys.argv[0])

def eval_output(target, output):
    """
    target, output are graph-tuple from TF-GNN,
    each of them contains N=batch-size graphs
    """
    tdds = utils_np.graphs_tuple_to_data_dicts(target)
    odds = utils_np.graphs_tuple_to_data_dicts(output)

    test_target = []
    test_pred = []
    for td, od in zip(tdds, odds):
        test_target.append(td['globals'])
        test_pred.append(od['globals'])
        # test_target.append(np.squeeze(td['globals']))
        # test_pred.append(np.squeeze(od['globals']))

    test_target = np.concatenate(test_target, axis=0)
    test_pred   = np.concatenate(test_pred,   axis=0)
    return test_pred, test_target


def compute_matrics(target, output, thresh=0.5):
    test_pred, test_target = eval_output(target, output)
    y_pred, y_true = (test_pred > thresh), (test_target > thresh)
    return sklearn.metrics.precision_score(y_true, y_pred), sklearn.metrics.recall_score(y_true, y_pred)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Train nx-graph with configurations')
    add_arg = parser.add_argument
    add_arg('config', help='configuration file')
    args = parser.parse_args()

    config = load_yaml(args.config)

    # add ops to save and restore all the variables
    prod_name = config['prod_name']
    output_dir = os.path.join(config['output_dir'], prod_name)
    os.makedirs(output_dir, exist_ok=True)

    config_tr = config['parameters']
    global_batch_size = n_graphs   = config_tr['batch_size']   # need optimization
    num_processing_steps_tr = config_tr['n_iters']      ## level of message-passing

    learning_rate = config_tr['learning_rate']
    optimizer = snt.optimizers.Adam(learning_rate)
    model = getattr(model, config['model_name'])()
 
    # prepare inputs
    tr_filenames = tf.io.gfile.glob(config['tfrec_dir_train'])
    n_train = len(tr_filenames)
    val_filenames = tf.io.gfile.glob(config['tfrec_dir_val'])
    n_val = len(val_filenames)

    print("Input file names: ", tr_filenames)
    print("{} training files".format(n_train))
    print("{} evaluation files".format(n_val))
    print("[{}] save models at {}".format(prog_name, output_dir))

    raw_train_dataset = tf.data.TFRecordDataset(tr_filenames)
    training_dataset = raw_train_dataset.map(graph.parse_tfrec_function)
    AUTO = tf.data.experimental.AUTOTUNE
    training_dataset = training_dataset.prefetch(AUTO)

    raw_val_dataset = tf.data.TFRecordDataset(val_filenames)
    testing_dataset = raw_val_dataset.map(graph.parse_tfrec_function)
    testing_dataset = testing_dataset.prefetch(AUTO)

    # inputs, targets = doublet_graphs.create_graph(batch_size)
    with_batch_dim = False
    input_list = []
    target_list = []
    for dd in training_dataset.take(global_batch_size).as_numpy_iterator():
        input_list.append(dd[0])
        target_list.append(dd[1])

    inputs = utils_tf.concat(input_list, axis=0)
    targets = utils_tf.concat(target_list, axis=0)
    input_signature = (
        graph.specs_from_graphs_tuple(inputs, with_batch_dim),
        graph.specs_from_graphs_tuple(targets, with_batch_dim)
    )

    # training loss
    if config_tr['real_weight']:
        real_weight = config_tr['real_weight']
        fake_weight = config_tr['fake_weight']
    else:
        real_weight = fake_weight = 1.0

    def create_loss_ops(target_op, output_ops):
        weights = target_op.globals * real_weight + (1 - target_op.globals) * fake_weight
        loss_ops = [
            tf.compat.v1.losses.log_loss(target_op.globals, output_op.globals, weights=weights)
            for output_op in output_ops
        ]
        return tf.stack(loss_ops)

    @functools.partial(tf.function, input_signature=input_signature)
    def update_step(inputs_tr, targets_tr):
        print("Tracing update_step")
        with tf.GradientTape() as tape:
            outputs_tr = model(inputs_tr, num_processing_steps_tr)
            loss_ops_tr = create_loss_ops(targets_tr, outputs_tr)
            loss_op_tr = tf.math.reduce_sum(loss_ops_tr) / tf.constant(num_processing_steps_tr, dtype=tf.float32)

        gradients = tape.gradient(loss_op_tr, model.trainable_variables)
        optimizer.apply(gradients, model.trainable_variables)
        return outputs_tr, loss_op_tr

    checkpoint = tf.train.Checkpoint(optimizer=optimizer, model=model)
    ckpt_manager = tf.train.CheckpointManager(checkpoint, directory=output_dir, max_to_keep=5)
    if os.path.exists(os.path.join(output_dir, ckpt_name)):
        print("Loading latest checkpoint")
        status = checkpoint.restore(ckpt_manager.latest_checkpoint)

    logged_iterations = []
    losses_tr = []
    corrects_tr = []
    solveds_tr = []


    start_time = time.time()
    last_log_time = start_time
    ## loop over iterations, each iteration generating a batch of data for training
    iruns = 0
    print("# (iteration number), TD (get graph), TR (TF run)")
    last_iteration = 0
    n_epochs = config_tr['epochs']

    # options = tf.data.Options()
    # options.experimental_distribute.auto_shard_policy = tf.data.experimental.AutoShardPolicy.DATA
    # training_dataset = training_dataset.with_options(options)
    # training_dataset = training_dataset.batch(global_batch_size).prefetch(AUTO)
    previous_accuracy = 0.0
    threshold = 0.5
    for epoch in range(n_epochs):
        training_dataset = training_dataset.shuffle(global_batch_size*4, reshuffle_each_iteration=True)
        testing_dataset = testing_dataset.shuffle(global_batch_size*4, reshuffle_each_iteration=True)

        total_loss = 0.
        num_batches = 0

        in_list = []
        target_list = []
        for inputs in training_dataset:
            inputs_tr, targets_tr = inputs
            in_list.append(inputs_tr)
            target_list.append(targets_tr)
            if len(in_list) == global_batch_size:
                inputs_tr = utils_tf.concat(in_list, axis=0)
                targets_tr = utils_tf.concat(target_list, axis=0)
                total_loss += update_step(inputs_tr, targets_tr)[1].numpy()
                in_list = []
                target_list = []
                num_batches += 1

        ckpt_manager.save()
        last_log_time = time.time()

        loss_tr = total_loss/num_batches
        # print("{} batches".format(num_batches))

        elapsed = time.time() - start_time
        inputs_te_list = []
        target_te_list = []
        predictions = []
        truth_info = []
        num_batches_te = 0
        total_loss_te = 0
        for inputs in testing_dataset:
            inputs_te, targets_te = inputs
            inputs_te_list.append(inputs_te)
            target_te_list.append(targets_te)
            if len(inputs_te_list) == global_batch_size:
                inputs_te = utils_tf.concat(inputs_te_list, axis=0)
                targets_te = utils_tf.concat(target_te_list, axis=0)
                outputs_te = model(inputs_te, num_processing_steps_tr)
                total_loss_te += (tf.math.reduce_sum(
                    create_loss_ops(targets_te, outputs_te))/tf.constant(
                        num_processing_steps_tr, dtype=tf.float32)).numpy()
                predictions.append(outputs_te[-1].globals)
                truth_info.append(targets_te.globals)
                inputs_te_list = []
                target_te_list = []
                num_batches_te += 1

        loss_te = total_loss_te / num_batches_te
        predictions = np.concatenate(predictions, axis=0)
        truth_info = np.concatenate(truth_info, axis=0)
        y_true, y_pred = (truth_info > threshold), (predictions > threshold)
        fpr, tpr, _ = sklearn.metrics.roc_curve(y_true, predictions)
        auc_te, accuracy_te, precision_te, recall_te = sklearn.metrics.auc(fpr, tpr),\
            sklearn.metrics.accuracy_score(y_true, y_pred),\
            sklearn.metrics.precision_score(y_true, y_pred),\
            sklearn.metrics.recall_score(y_true, y_pred)
        out_str = "* {:05d}, T {:.1f}, Ltr {:.4f}, Lge {:.4f}, AUC {:.4f}, A {:.4f}, P {:.4f}, R {:.4f}".format(
            epoch, elapsed, loss_tr, loss_te, auc_te,
            accuracy_te, precision_te, recall_te)
        print(out_str)
        if accuracy_te < previous_accuracy:
            print("Current accuracy {:.4f} is lower than previous {:.4f}. Stop Training.".format(accuracy_te, previous_accuracy))
            break
        else:
            previous_accuracy = accuracy_te